name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mytestdb  # <-- Dedicated test DB name
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/mytestdb
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install  # if you use Playwright for e2e tests
      
      # - name: Run tests
      #   env:
      #     DATABASE_URL: postgresql://user:password@localhost:5432/mytestdb
      #   run: |
      #     source venv/bin/activate
          
      #     # 1) Unit tests
      #     pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml
          
      #     # 2) Integration tests
      #     pytest tests/integration/
          
      #     # 3) E2E or other tests
      #     pytest tests/e2e/
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/mytestdb
        run: |
          source venv/bin/activate

          # 1) Start FastAPI app in the background
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &

          # 2) Wait a bit for the app to start
          sleep 5

          # 3) Run unit tests
          pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml

          # 4) Run integration tests
          pytest tests/integration/

          # 5) Run E2E tests (now server is available)
          pytest tests/e2e/

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build image
        run: docker build -t app:test .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
  
  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            yk346/601_final:latest
            yk346/601_final:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=yk346/601_final:cache
          cache-to: type=inline,mode=max
